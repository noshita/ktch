[project]
name = "ktch"
version = "0.5.0"
description = "ktch is a python package for model-based morphometrics."
authors = [{ name = "Noshita, Koji", email = "noshita@morphometrics.jp" }]
requires-python = ">=3.11"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["morphometrics", "theoretical morphology"]
classifiers = [
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Topic :: Software Development",
  "Topic :: Scientific/Engineering",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
  "numpy>=1.20",
  "pandas[pyarrow]>=2.1",
  "scikit-learn>=1.5",
  "scipy>=1.7",
]

[project.optional-dependencies]
docs = []

[project.urls]
Homepage = "https://doc.ktch.dev"
Repository = "https://github.com/noshita/ktch"

[dependency-groups]
dev = [
  "invoke>=2.2",
  "jupyter>=1.1",
  "jupyterlab>=4.3",
  "jupytext>=1.16",
  "liccheck>=0.9.2",
  "llvmlite>=0.44",
  "matplotlib>=3.10",
  "module-name>=0.6.0",
  "numba>=0.61",
  "opencv-python>=4.11",
  "plotly>=6.0",
  "poetry2conda>=0.3.0,<0.4",
  "pytest>=8.3",
  "pytest-cov>=6.0",
  "seaborn>=0.13",
  "setuptools<60.0",
  "tqdm>=4.67",
  "tslearn>=0.6.3",
  "xarray>=2025.1",
]
doc = [
  "myst-nb>=1.1",
  "nbsphinx>=0.9.6",
  "numpydoc>=1.8",
  "pydata-sphinx-theme>=0.16",
  "sphinx>=8.1",
  "sphinx-autobuild~=2024.10",
  "sphinx-favicon>=1.0.1",
  "sphinx-gallery>=0.18",
  "sphinx-sitemap>=2.6",
  "sphinxcontrib-bibtex>=2.6",
]

[tool.uv]
default-groups = ["dev", "doc"]

[build-system]
requires = ["hatchling", "hatch-conda-build"]
build-backend = "hatchling.build"

[tool.poetry2conda]
name = "ktch"

[tool.liccheck]
authorized_licenses = [
  "bsd",
  "new bsd",
  "bsd license",
  "simplified bsd",
  "apache",
  "apache 2.0",
  "apache software license",
  "isc license",
  "isc license (iscl)",
  "mit",
  "mit license",
  "python software foundation license",
  "Python Software Foundation",
]
unauthorized_licenses = ["gpl v3", "gnu agplv3"]

[tool.liccheck.authorized_packages]
uuid = "<=1.30"

[tool.jupytext]
formats = "ipynb,md:myst"

[tool.ruff]
exclude = [
  ".git",
  "__pycache__",
  "dist",
  "doc/_build",
  "doc/notebooks",
  "doc/generated",
]
line-length = 88

[tool.ruff.lint]
ignore = [
  "E203", # space before : (needed for how black formats slicing)
  "E731", # do not assign a lambda expression, use a def
  "E741", # do not use variables named 'l', 'O', or 'I'
  "F401", # imported but unused
]
select = ["E", "F", "W", "I"]
